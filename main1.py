import telebot
from telebot import types
from datetime import datetime, timedelta
import random
import time
import uuid
import threading
import json
import re

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ë–û–¢–ê –¢–ê –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---
# ! –û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ê–ü–û–í–ù–Ü–¢–¨ –¶–Ü –ü–û–õ–Ø –°–í–û–á–ú–ò –î–ê–ù–ò–ú–ò !
BOT_TOKEN = "8464332909:AAHqGvVoPsFLhN2sY0pFzRoTV50PbFonvP8"
ADMIN_ID = "7853750281"  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# ID —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏
CHANNEL_1_ID_CHECK = "-1002876132664"
CHANNEL_1_URL = "https://t.me/SNOWstars_community"

# --- –î–û–î–ê–ù–Ü –ö–ê–ù–ê–õ–ò
CHANNEL_2_ID_CHECK = "-1002456211789"
CHANNEL_2_URL = "https://t.me/sosatwww"

CHANNEL_3_ID_CHECK = "-1002589787086"
CHANNEL_3_URL = "https://t.me/+QaJyLlc38JsxOTli"
# ------------------------------------

bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
DEPOSIT_RATE_UAH_PER_PER_STAR = 0.87
WITHDRAW_RATE_UAH_PER_STAR = 0.77
DEPOSIT_REQUISITES = "IBAN_–ö–ê–†–¢–ò_–ê–ë–û_–Ü–ù–®–Ü_–†–ï–ö–í–Ü–ó–ò–¢–ò"
MIN_WITHDRAW_AMOUNT = 65
MIN_DEPOSIT_AMOUNT = 50
MIN_GAME_BET = 1

# –¶—ñ–Ω–∞ —Ç–∞ –±–æ–Ω—É—Å–∏ VIP-—Å—Ç–∞—Ç—É—Å—É
VIP_COST = 150.0
VIP_DAILY_BONUS_MULTIPLIER = 2.0
AD_DISCOUNT = 0.25
PROMO_CREATE_COST_MULTIPLIER = 0.8
REFERRAL_BONUS = 3.0
REFERRAL_EARNINGS_PERCENTAGE = 0.10

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞ SNOW —Ç–∞ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
INITIAL_SNOW_PRICE = 3.0
INITIAL_SNOW_AVAILABLE = 1000.0

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å—Ö–æ–≤–∏—â–∞ –¥–∞–Ω–∏—Ö
users = {}
pending_requests = {}
promos = {}
reviews = []
DICE_GAMES = {}
MINER_GAMES = {}
PLANE_GAMES = {}
user_orders = {}
market_data = {
    'market_price': INITIAL_SNOW_PRICE,
    'snow_available': INITIAL_SNOW_AVAILABLE,
    'is_open': True,
}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –º–Ω–æ–∂–Ω–∏–∫—ñ–≤ –°–∞–ø–µ—Ä–∞ (–æ–Ω–æ–≤–ª–µ–Ω–æ)
MINER_MULTIPLIERS = {
    5: [1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05],
    10: [1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05],
    15: [1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05],
    20: [1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05],
    24: [1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2.0, 2.05]
}

# –î–æ–¥–∞–Ω–æ –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
admin_promo_creation_state = {}

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---
def load_data():
    """–°–∏–º—É–ª—é—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ —Ñ–∞–π–ª—ñ–≤."""
    global users, pending_requests, promos, reviews, user_orders, market_data
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            users_raw = json.load(f)
            users = {str(k): v for k, v in users_raw.items()}
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}

    try:
        with open('requests.json', 'r', encoding='utf-8') as f:
            pending_requests = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        pending_requests = {}

    try:
        with open('promos.json', 'r', encoding='utf-8') as f:
            promos = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        promos = {}

    try:
        with open('reviews.json', 'r', encoding='utf-8') as f:
            reviews_data = json.load(f)
            if isinstance(reviews_data, list):
                reviews = reviews_data
            else:
                reviews = []
    except (FileNotFoundError, json.JSONDecodeError):
        reviews = []

    try:
        with open('orders.json', 'r', encoding='utf-8') as f:
            user_orders = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        user_orders = {}

    try:
        with open('market.json', 'r', encoding='utf-8') as f:
            file_content = f.read()
            if file_content:
                market_data.update(json.loads(file_content))
            else:
                print("–§–∞–π–ª market.json –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
    except (FileNotFoundError, json.JSONDecodeError):
        market_data = {
            'market_price': INITIAL_SNOW_PRICE,
            'snow_available': INITIAL_SNOW_AVAILABLE,
            'is_open': True,
        }

    # –°–∫–∏–¥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    pending_requests = {}
    save_data()


def save_data():
    """–°–∏–º—É–ª—é—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª–∏."""
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)
    with open('requests.json', 'w', encoding='utf-8') as f:
        json.dump(pending_requests, f, indent=4, ensure_ascii=False)
    with open('promos.json', 'w', encoding='utf-8') as f:
        json.dump(promos, f, indent=4, ensure_ascii=False)
    with open('reviews.json', 'w', encoding='utf-8') as f:
        json.dump(reviews, f, indent=4, ensure_ascii=False)
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(user_orders, f, indent=4, ensure_ascii=False)
    with open('market.json', 'w', encoding='utf-8') as f:
        json.dump(market_data, f, indent=4, ensure_ascii=False)


def safe_edit(text, chat_id, message_id, reply_markup=None, parse_mode=None):
    """
    –ë–µ–∑–ø–µ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.
    """
    try:
        return bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup, parse_mode=parse_mode)
    except telebot.apihelper.ApiException as e:
        if "message is not modified" in str(e):
            return None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {e}")
        # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–µ), –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ
        try:
            bot.delete_message(chat_id, message_id)
        except telebot.apihelper.ApiException:
            pass # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–≥–ª–æ –≤–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ
        return bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)


def escape_markdown(text):
    """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ Markdown."""
    if text is None:
        return 'N/A'
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


def award_referer_earnings(user_id, amount):
    user_data = users.get(user_id)
    if user_data and 'referer' in user_data:
        referer_id = user_data['referer']
        referer_data = users.get(referer_id)
        if referer_data:
            earning = amount * REFERRAL_EARNINGS_PERCENTAGE
            referer_data['balance'] += earning
            save_data()
            try:
                bot.send_message(referer_id,
                                 f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{escape_markdown(user_data.get('username', 'N/A'))} –∑–∞—Ä–æ–±–∏–≤ –∫–æ—à—Ç–∏, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ **{earning:.2f}‚≠êÔ∏è** ({int(REFERRAL_EARNINGS_PERCENTAGE * 100)}% –≤—ñ–¥ –∑–∞—Ä–æ–±—ñ—Ç–∫—É)!",
                                 parse_mode="Markdown")
            except telebot.apihelper.ApiException:
                pass


def is_subscribed(user_id):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏.
    """
    return (is_subscribed_to_channel(user_id, CHANNEL_1_ID_CHECK) and
            is_subscribed_to_channel(user_id, CHANNEL_2_ID_CHECK) and
            is_subscribed_to_channel(user_id, CHANNEL_3_ID_CHECK))


def is_subscribed_to_channel(user_id, channel_id):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–∞–Ω–∞–ª.
    –ë–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ.
    """
    try:
        member = bot.get_chat_member(channel_id, user_id)
        return member.status in ['member', 'creator', 'administrator']
    except telebot.apihelper.ApiException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def get_subscription_markup():
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –ö–∞–Ω–∞–ª 1", url=CHANNEL_1_URL))
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –ö–∞–Ω–∞–ª 2", url=CHANNEL_2_URL))
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –ö–∞–Ω–∞–ª 3", url=CHANNEL_3_URL))
    markup.add(types.InlineKeyboardButton("‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_subscription"))
    return markup


def get_main_reply_markup():
    """–ì–µ–Ω–µ—Ä—É—î –≥–æ–ª–æ–≤–Ω—É Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üè† –ú–µ–Ω—é")
    return markup


def get_cancel_inline_markup():
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel"))
    return markup


def get_main_inline_markup(user_id):
    """–ì–µ–Ω–µ—Ä—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
               types.InlineKeyboardButton("üèÜ –¢–æ–ø 10", callback_data="top10"))
    markup.add(types.InlineKeyboardButton("üéÆ –Ü–≥—Ä–∏", callback_data="games"),
               types.InlineKeyboardButton("üéÅ –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å", callback_data="daily_bonus"))
    markup.add(types.InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="referral"),
               types.InlineKeyboardButton("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", callback_data="crypto_investments"))
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return markup


def show_main_menu(user_id, chat_id, message_id=None):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    –ó–º—ñ–Ω–µ–Ω–æ, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    user_data = users.get(str(user_id), {})
    username = escape_markdown(user_data.get('username', 'N/A'))

    menu_text = f"–í—ñ—Ç–∞—î–º–æ, **{username}**! üëã\n–í–∞—à –±–∞–ª–∞–Ω—Å: **{user_data.get('balance', 0):.2f} ‚≠ê**\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:"

    markup = get_main_inline_markup(user_id)
    if message_id:
        safe_edit(menu_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, menu_text, reply_markup=markup, parse_mode="Markdown")


def show_admin_market_manage(chat_id, message_id):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–º SNOW –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    market_status = "–∞–∫—Ç–∏–≤–Ω–∏–π" if market_data.get('is_open', True) else "–≤–∏–º–∫–Ω–µ–Ω–∏–π"
    manage_text = f"üìà **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–Ω–∫–æ–º SNOW**\n\n"
    manage_text += f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: **{market_status}**\n"
    manage_text += f"–†–∏–Ω–∫–æ–≤–∞ —Ü—ñ–Ω–∞: **{market_data.get('market_price', INITIAL_SNOW_PRICE):.2f}‚≠êÔ∏è**\n"
    manage_text += f"–î–æ—Å—Ç—É–ø–Ω–æ SNOW: **{market_data.get('snow_available', 0.0):.2f}‚ùÑÔ∏è**\n\n"
    manage_text += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"

    markup = types.InlineKeyboardMarkup(row_width=2)
    if market_data.get('is_open', True):
        markup.add(types.InlineKeyboardButton("‚è∏ –í–∏–º–∫–Ω—É—Ç–∏ —Ä–∏–Ω–æ–∫", callback_data="admin_market_toggle"))
    else:
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–∏–Ω–æ–∫", callback_data="admin_market_toggle"))
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data="admin_set_market_price"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ SNOW", callback_data="admin_add_snow"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    safe_edit(manage_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_admin_panel(user_id, chat_id, message_id=None):
    pending_deposits = [req for req in pending_requests.values() if req.get('type') == 'deposit' and req.get('status') == 'pending']
    pending_withdraws = [req for req in pending_requests.values() if req.get('type') == 'withdraw' and req.get('status') == 'pending']

    admin_text = "üîê **–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
    
    admin_text += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    markup.add(types.InlineKeyboardButton(f"üí≥ –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω—å ({len(pending_deposits)})", callback_data="admin_deposit_requests_list"))
    markup.add(types.InlineKeyboardButton(f"üí∏ –û–±—Ä–æ–±–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è ({len(pending_withdraws)})", callback_data="admin_withdraw_requests_list"))

    # –ó–º—ñ–Ω–µ–Ω–æ: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–π –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
    markup.add(types.InlineKeyboardButton("üéÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_create_promo_step1"))
    markup.add(types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_show_users_0"))
    markup.add(types.InlineKeyboardButton("üí∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_manage_balance"))
    markup.add(types.InlineKeyboardButton("üì£ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast"))
    markup.add(types.InlineKeyboardButton("üìà –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–Ω–∫–æ–º", callback_data="admin_market_manage"))
    markup.add(types.InlineKeyboardButton("üèÜ –¢–æ–ø 15 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤", callback_data="admin_top_referrers"))
    markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
    if message_id:
        safe_edit(admin_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, admin_text, reply_markup=get_main_reply_markup(), parse_mode="Markdown")


def show_deposit_requests_list(chat_id, message_id):
    pending_deposits = [req for req in pending_requests.values() if req.get('type') == 'deposit' and req.get('status') == 'pending']
    
    if not pending_deposits:
        text = "‚úÖ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        return

    text = "üí≥ **–ó–∞–ø–∏—Ç–∏ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:**\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for i, req in enumerate(pending_deposits):
        request_id = req.get('request_id', 'N/A')
        username = req.get('username', 'N/A')
        amount = req.get('amount', 0)
        text += f"**{i+1}.** @{escape_markdown(username)} - {amount:.2f}‚≠êÔ∏è\n"
        markup.add(types.InlineKeyboardButton(f"‚ñ∂Ô∏è –ó–∞–ø–∏—Ç #{i+1}", callback_data=f"admin_view_deposit_{request_id}"))
    
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_withdraw_requests_list(chat_id, message_id):
    pending_withdraws = [req for req in pending_requests.values() if req.get('type') == 'withdraw' and req.get('status') == 'pending']
    
    if not pending_withdraws:
        text = "‚úÖ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        return

    text = "üí∏ **–ó–∞–ø–∏—Ç–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:**\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for i, req in enumerate(pending_withdraws):
        request_id = req.get('request_id', 'N/A')
        username = req.get('username', 'N/A')
        amount = req.get('amount', 0)
        text += f"**{i+1}.** @{escape_markdown(username)} - {amount:.2f}‚≠êÔ∏è\n"
        markup.add(types.InlineKeyboardButton(f"‚ñ∂Ô∏è –ó–∞–ø–∏—Ç #{i+1}", callback_data=f"admin_view_withdraw_{request_id}"))
        
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

def show_users_list(chat_id, message_id, page):
    users_list = sorted(users.values(), key=lambda x: (x.get('username') or 'z').lower())
    page_size = 10
    total_pages = (len(users_list) + page_size - 1) // page_size
    start_index = page * page_size
    end_index = start_index + page_size
    current_page_users = users_list[start_index:end_index]
    
    if not current_page_users:
        text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        return
        
    text = f"üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1}/{total_pages})**\n\n"
    for i, user_data in enumerate(current_page_users):
        username = user_data.get('username', 'N/A')
        balance = user_data.get('balance', 0)
        is_vip = "üëë" if user_data.get('is_vip') else ""
        text += f"**{start_index + i + 1}.** @{escape_markdown(username)} {is_vip} - **{balance:.2f} ‚≠ê**\n"
        
    markup = types.InlineKeyboardMarkup(row_width=3)
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"admin_show_users_{page - 1}"))
    if page < total_pages - 1:
        markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"admin_show_users_{page + 1}"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_profile_menu(user_id, chat_id, message_id):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_data = users.get(str(user_id), {})
    username = escape_markdown(user_data.get('username', 'N/A'))
    user_id_int = user_data.get('id', 'N/A')
    balance = user_data.get('balance', 0)
    snow_balance = user_data.get('snow_balance', 0)
    is_vip = user_data.get('is_vip', False)
    vip_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if is_vip else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"

    profile_text = (f"üë§ **–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
                    f"**–í–∞—à ID:** `{user_id_int}`\n"
                    f"**–í–∞—à –Ω—ñ–∫–Ω–µ–π–º:** @{username}\n"
                    f"**–ë–∞–ª–∞–Ω—Å:** `{balance:.2f} ‚≠ê`\n"
                    f"**SNOW-–±–∞–ª–∞–Ω—Å:** `{snow_balance:.2f} ‚ùÑÔ∏è`\n"
                    f"**VIP-—Å—Ç–∞—Ç—É—Å:** {vip_status}\n\n"
                    f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit"),
               types.InlineKeyboardButton("üí∏ –í–∏–≤–µ—Å—Ç–∏", callback_data="withdraw"))
    
    if not is_vip:
        markup.add(types.InlineKeyboardButton("üëë –ö—É–ø–∏—Ç–∏ VIP-—Å—Ç–∞—Ç—É—Å", callback_data="buy_vip"))
    
    # –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–º–æ–∫–æ–¥"
    markup.add(types.InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_menu"))

    markup.add(types.InlineKeyboardButton("üìú –í—ñ–¥–≥—É–∫–∏", callback_data="reviews"),
               types.InlineKeyboardButton("üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data="instructions"))
    
    markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
    
    safe_edit(profile_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_reviews(user_id, chat_id, message_id):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é."""
    reviews_list = sorted(reviews, key=lambda x: x.get('timestamp', '1970-01-01'), reverse=True)

    if not reviews_list:
        reviews_text = "üìú **–í—ñ–¥–≥—É–∫–∏**\n\n–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–ª–∏—à–∏–≤ –≤—ñ–¥–≥—É–∫. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º!"
    else:
        reviews_text = "üìú **–í—ñ–¥–≥—É–∫–∏**\n\n"
        for i, review in enumerate(reviews_list):
            try:
                review_date = datetime.fromisoformat(review.get('timestamp', '')).strftime('%d.%m.%Y %H:%M')
            except ValueError:
                review_date = 'N/A'
            reviews_text += f"**{i + 1}**. \nüí¨ **@{escape_markdown(review.get('username', 'N/A'))}:**\n_{escape_markdown(review['text'])}_\n`{review_date}`\n\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="leave_review"))
    if str(user_id) == str(ADMIN_ID):
        markup.add(types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="admin_delete_review_menu"))

    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))

    safe_edit(reviews_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_instructions(user_id, chat_id, message_id):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞."""
    instructions_text = (
        "üìù **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞**\n\n"
        "**1. –ú–µ–Ω—é:**\n"
        " - **üë§ –ü—Ä–æ—Ñ—ñ–ª—å:** –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å, –∫—É–ø—É–π—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å, –ø–æ–ø–æ–≤–Ω—é–π—Ç–µ —Ç–∞ –≤–∏–≤–æ–¥—å—Ç–µ –∫–æ—à—Ç–∏.\n"
        " - **üèÜ –¢–æ–ø 10:** –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º.\n"
        " - **üéÆ –Ü–≥—Ä–∏:** –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É –º—ñ–Ω—ñ-—ñ–≥—Ä–∞—Ö, —Ç–∞–∫–∏—Ö —è–∫ –ö—ñ—Å—Ç–∫–∏, –°–∞–ø–µ—Ä —Ç–∞ –õ—ñ—Ç–∞–∫–∏, —â–æ–± –∑–∞—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ ‚≠ê.\n"
        " - **üéÅ –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å:** –û—Ç—Ä–∏–º—É–π—Ç–µ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å, —è–∫–∏–π –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.\n"
        " - **üë• –†–µ—Ñ–µ—Ä–∞–ª–∏:** –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ —Å–≤–æ—ó–º —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–æ–Ω—É—Å–∏.\n"
        " - **üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó:** –ö—É–ø—É–π—Ç–µ —Ç–∞ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω SNOW –Ω–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º—É —Ä–∏–Ω–∫—É.\n\n"
        "**2. –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:**\n"
        " - –î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏', –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ UAH —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º.\n"
        " - –î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üí∏ –í–∏–≤–µ—Å—Ç–∏', –≤–∫–∞–∂—ñ—Ç—å —Å—É–º—É –≤ ‚≠ê —Ç–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏.\n\n"
        "**3. –Ü–≥—Ä–∏:**\n"
        " - –ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –≥—Ä–∏ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É. –í–∏–≥—Ä–∞–≤–∞–π—Ç–µ, —â–æ–± –ø–æ–º–Ω–æ–∂–∏—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å!\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))
    
    safe_edit(instructions_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def parse_amount(text):
    """
    –ë–µ–∑–ø–µ—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —Ç–µ–∫—Å—Ç —É float. –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ –∫—Ä–∞–ø–∫—É, —Ç–∞–∫ —ñ –∫–æ–º—É —è–∫ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á.
    –ü–æ–≤–µ—Ä—Ç–∞—î float –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏.
    """
    try:
        cleaned_text = text.replace(',', '.').strip()
        if cleaned_text.endswith('.'):
            cleaned_text = cleaned_text[:-1]
        
        if not re.match(r'^-?\d+(\.\d+)?$', cleaned_text):
            return None
            
        return float(cleaned_text)
    except (ValueError, TypeError):
        return None

def find_user_by_id_or_username(query):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ username.
    """
    if query in users:
        return query
    
    cleaned_query = query.lower().strip().replace('@', '')
    for user_id, user_data in users.items():
        if (user_data.get('username') or '').lower() == cleaned_query:
            return user_id
    
    return None


def get_top_referer_username():
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –∑–∞–ø—Ä–æ—Å–∏–≤ –Ω–∞–π–±—ñ–ª—å—à–µ –ª—é–¥–µ–π, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ @username.
    """
    referer_counts = {}
    for user_data in users.values():
        referer_id = user_data.get('referer')
        if referer_id:
            referer_counts[referer_id] = referer_counts.get(referer_id, 0) + 1

    if not referer_counts:
        return None

    top_referer_id = max(referer_counts, key=referer_counts.get)
    top_referer_data = users.get(top_referer_id)
    if top_referer_data:
        return top_referer_data.get('username', None)
    return None


def create_miner_game(user_id, bet, mines_count):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É –°–∞–ø–µ—Ä."""
    board_size = 5
    board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
    mines = random.sample(range(board_size * board_size), mines_count)
    for i in mines:
        row, col = divmod(i, board_size)
        board[row][col] = 'üí£'

    MINER_GAMES[user_id] = {
        'bet': bet,
        'mines_count': mines_count,
        'board_size': board_size,
        'board': board,
        'revealed': [[False for _ in range(board_size)] for _ in range(board_size)],
        'steps': 0
    }
    return MINER_GAMES[user_id]


def get_miner_markup(user_id):
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä–∏ –≤ –°–∞–ø–µ—Ä."""
    game = MINER_GAMES.get(user_id)
    if not game:
        return None

    markup = types.InlineKeyboardMarkup(row_width=game['board_size'])
    
    for row_index, row in enumerate(game['board']):
        row_buttons = []
        for col_index, cell in enumerate(row):
            button_text = "‚ùì"
            if game['revealed'][row_index][col_index]:
                if cell == 'üí£':
                    button_text = 'üí£'
                else:
                    button_text = "‚úÖ"
                row_buttons.append(types.InlineKeyboardButton(button_text, callback_data="miner_noop"))
            else:
                row_buttons.append(types.InlineKeyboardButton(button_text, callback_data=f"miner_click_{row_index}_{col_index}"))
        markup.add(*row_buttons)

    multiplier_list = MINER_MULTIPLIERS.get(game['mines_count'], [])
    if game['steps'] < len(multiplier_list):
        current_multiplier = multiplier_list[game['steps']]
    else:
        current_multiplier = multiplier_list[-1] if multiplier_list else 1.0

    current_win = game['bet'] * current_multiplier

    if game['steps'] > 0:
        markup.add(types.InlineKeyboardButton(f"üí∏ –ó–∞–±—Ä–∞—Ç–∏ –≤–∏–≥—Ä–∞—à ({current_win:.2f}‚≠êÔ∏è)", callback_data="miner_cashout"))
    markup.add(types.InlineKeyboardButton("‚ùå –í–∏–π—Ç–∏", callback_data="games"))
    return markup


# –ó–º—ñ–Ω–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≥—Ä–∏ "–õ—ñ—Ç–∞–∫–∏"
def start_plane_game(user_id, bet, message):
    game_state = {
        'bet': bet,
        'multiplier': 1.00,
        'message_id': message.message_id,
        'chat_id': message.chat.id,
        'running': True,
        'crash_chance_per_tick': 0.005 # –ë–∞–∑–æ–≤–∏–π —à–∞–Ω—Å –Ω–∞ –∫—Ä–∞—à –∑–∞ –∫–æ–∂–µ–Ω —Ç—ñ–∫
    }
    PLANE_GAMES[user_id] = game_state
    
    update_plane_message(user_id)

def update_plane_message(user_id):
    game_state = PLANE_GAMES.get(user_id)
    if not game_state or not game_state['running']:
        return

    # –î–∏–Ω–∞–º—ñ—á–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —à–∞–Ω—Å—É –Ω–∞ –∫—Ä–∞—à
    current_crash_chance = game_state['crash_chance_per_tick'] * game_state['multiplier']
    
    if random.random() < current_crash_chance:
        game_state['running'] = False
        text = f"‚úàÔ∏è **–ì—Ä–∞ '–õ—ñ—Ç–∞–∫–∏'**\n\n" \
               f"–õ—ñ—Ç–∞–∫ —Ä–æ–∑–±–∏–≤—Å—è –Ω–∞ –º–Ω–æ–∂–Ω–∏–∫—É **x{game_state['multiplier']:.2f}**!\n" \
               f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ **{game_state['bet']:.2f}‚≠êÔ∏è** –∑–≥–æ—Ä—ñ–ª–∞. üòû"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_plane"),
                   types.InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="games"))
        safe_edit(text, game_state['chat_id'], game_state['message_id'], reply_markup=markup, parse_mode="Markdown")
        if user_id in PLANE_GAMES:
            del PLANE_GAMES[user_id]
        return

    game_state['multiplier'] += 0.01

    win_amount = game_state['bet'] * game_state['multiplier']

    text = f"‚úàÔ∏è **–ì—Ä–∞ '–õ—ñ—Ç–∞–∫–∏'**\n\n" \
           f"–°—Ç–∞–≤–∫–∞: **{game_state['bet']:.2f}‚≠êÔ∏è**\n" \
           f"–ú–Ω–æ–∂–Ω–∏–∫: **x{game_state['multiplier']:.2f}**\n" \
           f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –≤–∏–≥—Ä–∞—à: **{win_amount:.2f}‚≠êÔ∏è**"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(f"üí∏ –ó–∞–±—Ä–∞—Ç–∏ ({win_amount:.2f}‚≠êÔ∏è)", callback_data="plane_cashout"))

    safe_edit(text, game_state['chat_id'], game_state['message_id'], reply_markup=markup, parse_mode="Markdown")

    timer = threading.Timer(0.7, update_plane_message, args=(user_id,))
    timer.start()

def show_investments_menu(user_id, chat_id, message_id):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π."""
    market = market_data.copy()
    market_price = market['market_price']
    snow_available = market['snow_available']
    is_open = market['is_open']
    
    status = "–∞–∫—Ç–∏–≤–Ω–∏–π" if is_open else "–∑–∞–∫—Ä–∏—Ç–∏–π"

    invest_text = (f"üìà **–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó SNOW**\n\n"
                   f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏–Ω–∫—É: **{status}**\n"
                   f"–¶—ñ–Ω–∞ 1 SNOW: **{market_price:.2f} ‚≠ê**\n"
                   f"–î–æ—Å—Ç—É–ø–Ω–æ SNOW –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: **{snow_available:.2f} ‚ùÑÔ∏è**\n\n"
                   f"–í–∞—à SNOW-–±–∞–ª–∞–Ω—Å: **{users[str(user_id)]['snow_balance']:.2f} ‚ùÑÔ∏è**\n"
                   f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{users[str(user_id)]['balance']:.2f} ‚≠ê**\n\n"
                   f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")

    markup = types.InlineKeyboardMarkup(row_width=2)
    if is_open:
        markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç–∏ SNOW", callback_data="buy_snow"))
    markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
    safe_edit(invest_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


def show_daily_bonus_menu(user_id, chat_id, message_id):
    user_data = users.get(str(user_id), {})
    last_bonus_date_str = user_data.get('last_daily_bonus', '1970-01-01T00:00:00')
    last_bonus_date = datetime.fromisoformat(last_bonus_date_str)
    
    current_date = datetime.now()
    next_day_date = last_bonus_date + timedelta(days=1)
    
    # –û–Ω–æ–≤–ª–µ–Ω–æ, —â–æ–± —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –ø–æ—á–∏–Ω–∞–≤—Å—è –∑ 0.10 —ñ –∑–±—ñ–ª—å—à—É–≤–∞–≤—Å—è –Ω–∞ 0.10
    bonus_amount = user_data.get('daily_bonus_amount', 0.10)
    
    text = "üéÅ **–©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å**\n\n"
    markup = types.InlineKeyboardMarkup()
    
    if (current_date.date() - last_bonus_date.date()).days > 0:
        if bonus_amount > 1.0: # –°–∫–∏–¥–∞—î–º–æ –ø—ñ—Å–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è 1.0
             user_data['daily_bonus_amount'] = 0.10
             bonus_amount = 0.10
             save_data()
        
        text += f"üéâ –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å: **{bonus_amount:.2f} ‚≠ê**\n\n"
        markup.add(types.InlineKeyboardButton("üéâ –ó–∞–±—Ä–∞—Ç–∏ –±–æ–Ω—É—Å", callback_data=f"claim_daily_bonus_{bonus_amount}"))
    else:
        time_to_wait = next_day_date - current_date
        hours, remainder = divmod(time_to_wait.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        text += f"‚è∞ –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.\n"
        text += f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –±–æ–Ω—É—Å –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑: **{hours:02}:{minutes:02}:{seconds:02}**"
    
    if user_data.get('daily_bonus_amount', 0.10) < 1.0:
        next_bonus_amount = min(user_data.get('daily_bonus_amount', 0.10) + 0.10, 1.0)
        text += f"\n\n–ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤—Ç—Ä–∞: **{next_bonus_amount:.2f} ‚≠ê**"

    markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
    safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")


# --- –û–°–ù–û–í–ù–Ü –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    if not username:
        username = f"user_{user_id}"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if user_id not in users:
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        users[user_id] = {
            'id': user_id,
            'username': username,
            'balance': 0.0,
            'snow_balance': 0.0,
            'is_vip': False,
            'last_daily_bonus': '1970-01-01T00:00:00',
            'daily_bonus_amount': 0.10,
            'activated_promos': []
        }
        save_data()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        ref_id_match = re.match(r'/start\s+(\d+)', message.text)
        if ref_id_match:
            referer_id = ref_id_match.group(1)
            if referer_id != user_id and referer_id in users:
                users[user_id]['referer'] = referer_id
                users[user_id]['balance'] += REFERRAL_BONUS
                users[referer_id]['balance'] += REFERRAL_BONUS
                save_data()
                bot.send_message(referer_id, f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{escape_markdown(username)} –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —ñ –≤–∏ –æ–±–∏–¥–≤–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ **{REFERRAL_BONUS:.2f} ‚≠ê**!", parse_mode="Markdown")
                bot.send_message(message.chat.id, f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ **{REFERRAL_BONUS:.2f} ‚≠ê**!", parse_mode="Markdown")
        
    if not is_subscribed(user_id):
        text = ("‚ùóÔ∏è **–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à—ñ –∫–∞–Ω–∞–ª–∏:**")
        bot.send_message(message.chat.id, text, reply_markup=get_subscription_markup(), parse_mode="Markdown")
    else:
        show_main_menu(user_id, message.chat.id)


@bot.message_handler(func=lambda message: message.text == "üè† –ú–µ–Ω—é")
def handle_menu_button(message):
    user_id = str(message.from_user.id)
    if not is_subscribed(user_id):
        text = ("‚ùóÔ∏è **–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à—ñ –∫–∞–Ω–∞–ª–∏:**")
        bot.send_message(message.chat.id, text, reply_markup=get_subscription_markup(), parse_mode="Markdown")
    else:
        show_main_menu(user_id, message.chat.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    data = call.data

    bot.answer_callback_query(call.id)
    
    if not is_subscribed(user_id):
        text = ("‚ùóÔ∏è **–ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à—ñ –∫–∞–Ω–∞–ª–∏:**")
        safe_edit(text, chat_id, message_id, reply_markup=get_subscription_markup(), parse_mode="Markdown")
        return

    # --- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ---
    if data == "main_menu":
        show_main_menu(user_id, chat_id, message_id)
    
    # --- –ü–†–û–§–Ü–õ–¨ ---
    elif data == "profile":
        show_profile_menu(user_id, chat_id, message_id)

    # --- –ü–†–û–ú–û–ö–û–î–ò (–ù–û–í–ï) ---
    elif data == "promo_menu":
        text = "üéÅ **–ü—Ä–æ–º–æ–∫–æ–¥–∏**\n\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å:"
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(sent_msg, process_promo_code, sent_msg)
        
    # --- –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø ---
    elif data == "instructions":
        show_instructions(user_id, chat_id, message_id)

    # --- –í–Ü–î–ì–£–ö–ò ---
    elif data == "reviews":
        show_reviews(user_id, chat_id, message_id)
        
    elif data == "leave_review":
        text = "üí¨ **–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:**"
        markup = types.ForceReply(selective=False)
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_review, sent_msg)

    # --- –¢–û–ü 10 ---
    elif data == "top10":
        top_users = sorted(users.values(), key=lambda x: x.get('balance', 0), reverse=True)[:10]
        text = "üèÜ **–¢–æ–ø 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º:**\n\n"
        for i, user_data in enumerate(top_users):
            username = escape_markdown(user_data.get('username', 'N/A'))
            balance = user_data.get('balance', 0)
            text += f"**{i+1}.** @{username} - **{balance:.2f} ‚≠ê**\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

    # --- –Ü–ì–†–ò ---
    elif data == "games":
        games_text = "üéÆ **–Ü–≥—Ä–æ–≤–∏–π –∑–∞–ª**\n\n–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É:"
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("üé≤ –ö—ñ—Å—Ç–∫–∏", callback_data="game_dice"),
                   types.InlineKeyboardButton("‚õèÔ∏è –°–∞–ø–µ—Ä", callback_data="game_miner"))
        markup.add(types.InlineKeyboardButton("‚úàÔ∏è –õ—ñ—Ç–∞–∫–∏", callback_data="game_plane"),
                   types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
        safe_edit(games_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

    elif data == "game_dice":
        dice_text = "üé≤ **–ì—Ä–∞ '–ö—ñ—Å—Ç–∫–∏'**\n\n–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç:"
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("üü¢ –ü–∞—Ä–Ω–µ", callback_data="dice_even"),
                   types.InlineKeyboardButton("üî¥ –ù–µ–ø–∞—Ä–Ω–µ", callback_data="dice_odd"))
        markup.add(types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
        safe_edit(dice_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

    elif data in ["dice_even", "dice_odd"]:
        choice = data.split('_')[1]
        text = f"üé≤ –í–∏ –æ–±—Ä–∞–ª–∏ **{'–ü–∞—Ä–Ω–µ' if choice == 'even' else '–ù–µ–ø–∞—Ä–Ω–µ'}**.\n\n" \
               f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: **{MIN_GAME_BET} ‚≠ê**."
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_dice_bet, sent_msg, choice)

    elif data == "game_miner":
        miner_text = "‚õèÔ∏è **–ì—Ä–∞ '–°–∞–ø–µ—Ä'**\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω:"
        markup = types.InlineKeyboardMarkup(row_width=3)
        markup.add(types.InlineKeyboardButton("5 –º—ñ–Ω", callback_data="miner_mines_5"),
                   types.InlineKeyboardButton("10 –º—ñ–Ω", callback_data="miner_mines_10"),
                   types.InlineKeyboardButton("15 –º—ñ–Ω", callback_data="miner_mines_15"))
        markup.add(types.InlineKeyboardButton("20 –º—ñ–Ω", callback_data="miner_mines_20"),
                   types.InlineKeyboardButton("24 –º—ñ–Ω–∏", callback_data="miner_mines_24"))
        markup.add(types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
        safe_edit(miner_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

    elif data.startswith("miner_mines_"):
        mines_count = int(data.split('_')[2])
        text = f"‚õèÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ **{mines_count} –º—ñ–Ω**.\n\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: **{MIN_GAME_BET} ‚≠ê**."
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_miner_bet, sent_msg, mines_count)
        
    elif data.startswith("miner_click_"):
        game = MINER_GAMES.get(user_id)
        if not game:
            safe_edit("‚ùå –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id))
            return
        
        row, col = map(int, data.split('_')[2:])
        
        if game['revealed'][row][col]:
            bot.answer_callback_query(call.id, "–¶—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞.")
            return

        game['revealed'][row][col] = True
        
        if game['board'][row][col] == 'üí£':
            # –ü—Ä–æ–≥—Ä–∞—à
            text = f"‚õèÔ∏è **–ì—Ä–∞ '–°–∞–ø–µ—Ä'**\n\n" \
                   f"–í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –º—ñ–Ω—É! üí•\n" \
                   f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ **{game['bet']:.2f} ‚≠ê** –∑–≥–æ—Ä—ñ–ª–∞. üòû"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_miner"),
                       types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
            if user_id in MINER_GAMES:
                del MINER_GAMES[user_id]
            return
        else:
            # –í–∏–≥—Ä–∞—à
            game['steps'] += 1
            multiplier_list = MINER_MULTIPLIERS.get(game['mines_count'], [])
            
            if game['steps'] <= len(multiplier_list):
                current_multiplier = multiplier_list[game['steps'] - 1]
            else:
                current_multiplier = multiplier_list[-1] if multiplier_list else 1.0

            win_amount = game['bet'] * current_multiplier
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
            total_cells = game['board_size'] * game['board_size']
            revealed_count = sum(row.count(True) for row in game['revealed'])
            
            if revealed_count == total_cells - game['mines_count']:
                users[user_id]['balance'] += win_amount
                save_data()
                text = f"üéâ **–í—ñ—Ç–∞—î–º–æ!** –í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –≤—Å—ñ –±–µ–∑–ø–µ—á–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —ñ –≤–∏–≥—Ä–∞–ª–∏!\n\n" \
                       f"–í–∏ –≤–∏–≥—Ä–∞–ª–∏: **{win_amount:.2f} ‚≠ê**\n" \
                       f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_id]['balance']:.2f} ‚≠ê**"
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_miner"),
                           types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
                safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
                award_referer_earnings(user_id, win_amount - game['bet'])
                if user_id in MINER_GAMES:
                    del MINER_GAMES[user_id]
                return
            
            game_text = (f"‚õèÔ∏è **–ì—Ä–∞ '–°–∞–ø–µ—Ä'**\n\n"
                         f"–°—Ç–∞–≤–∫–∞: **{game['bet']:.2f} ‚≠ê**\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω: **{game['mines_count']}**\n\n"
                         f"–ü–æ—Ç–æ—á–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫: **x{current_multiplier:.2f}**\n"
                         f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –≤–∏–≥—Ä–∞—à: **{win_amount:.2f} ‚≠ê**\n\n"
                         f"–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É:")
            
            safe_edit(game_text, chat_id, message_id, reply_markup=get_miner_markup(user_id), parse_mode="Markdown")
    
    elif data == "miner_cashout":
        game = MINER_GAMES.get(user_id)
        if not game:
            safe_edit("‚ùå –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id))
            return
            
        multiplier_list = MINER_MULTIPLIERS.get(game['mines_count'], [])
        if game['steps'] > 0 and game['steps'] <= len(multiplier_list):
            current_multiplier = multiplier_list[game['steps'] - 1]
            win_amount = game['bet'] * current_multiplier
            users[user_id]['balance'] += win_amount
            save_data()
            text = f"üéâ **–í—ñ—Ç–∞—î–º–æ!** –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –≤–∏–≥—Ä–∞—à!\n\n" \
                   f"–ú–Ω–æ–∂–Ω–∏–∫: **x{current_multiplier:.2f}**\n" \
                   f"–í–∏–≥—Ä–∞—à: **{win_amount:.2f} ‚≠ê**\n" \
                   f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_id]['balance']:.2f} ‚≠ê**"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_miner"),
                       types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
            award_referer_earnings(user_id, win_amount - game['bet'])
        else:
            safe_edit("‚ùå –í–∏ —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏–ª–∏ –∂–æ–¥–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏. –ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É.", chat_id, message_id, reply_markup=get_miner_markup(user_id))
            
        if user_id in MINER_GAMES:
            del MINER_GAMES[user_id]
        
    elif data == "game_plane":
        plane_text = "‚úàÔ∏è **–ì—Ä–∞ '–õ—ñ—Ç–∞–∫–∏'**\n\n" \
                     "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: **{MIN_GAME_BET} ‚≠ê**."
        sent_msg = safe_edit(plane_text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_plane_bet, sent_msg)
    
    elif data == "plane_cashout":
        game = PLANE_GAMES.get(user_id)
        if not game:
            safe_edit("‚ùå –ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id))
            return
            
        win_amount = game['bet'] * game['multiplier']
        users[user_id]['balance'] += win_amount
        save_data()
        
        text = f"üéâ **–í—ñ—Ç–∞—î–º–æ!** –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –≤–∏–≥—Ä–∞—à!\n\n" \
               f"–ú–Ω–æ–∂–Ω–∏–∫: **x{game['multiplier']:.2f}**\n" \
               f"–í–∏–≥—Ä–∞—à: **{win_amount:.2f} ‚≠ê**\n" \
               f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_id]['balance']:.2f} ‚≠ê**"
               
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_plane"),
                   types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
                   
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
        award_referer_earnings(user_id, win_amount - game['bet'])
        
        if user_id in PLANE_GAMES:
            del PLANE_GAMES[user_id]
            
    # --- –Ü–ù–í–ï–°–¢–ò–¶–Ü–á SNOW ---
    elif data == "crypto_investments":
        show_investments_menu(user_id, chat_id, message_id)

    elif data == "buy_snow":
        market = market_data.copy()
        if not market['is_open'] or market['snow_available'] <= 0:
            text = "‚ùå –ù–∞ –∂–∞–ª—å, —Ä–∏–Ω–æ–∫ SNOW –Ω–∞—Ä–∞–∑—ñ –∑–∞–∫—Ä–∏—Ç–∏–π –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è."
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", callback_data="crypto_investments"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
            return
        
        price = market['market_price']
        text = (f"üìà **–ö—É–ø—ñ–≤–ª—è SNOW**\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: **1 SNOW = {price:.2f} ‚≠ê**\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: **{market['snow_available']:.2f} ‚ùÑÔ∏è**\n\n"
                f"–í–∞—à SNOW-–±–∞–ª–∞–Ω—Å: **{users[str(user_id)]['snow_balance']:.2f} ‚ùÑÔ∏è**\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{users[str(user_id)]['balance']:.2f} ‚≠ê**\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å SNOW, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏:")
        
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_buy_snow_amount, sent_msg)
    
    # --- –©–û–î–ï–ù–ù–ò–ô –ë–û–ù–£–° ---
    elif data == "daily_bonus":
        show_daily_bonus_menu(user_id, chat_id, message_id)
        
    elif data.startswith("claim_daily_bonus_"):
        bonus_amount_str = data.split('_')[3]
        bonus_amount = parse_amount(bonus_amount_str)
        
        user_data = users.get(user_id, {})
        last_bonus_date_str = user_data.get('last_daily_bonus', '1970-01-01T00:00:00')
        last_bonus_date = datetime.fromisoformat(last_bonus_date_str)
        
        current_date = datetime.now()
        
        if (current_date.date() - last_bonus_date.date()).days > 0:
            user_data['balance'] += bonus_amount
            user_data['last_daily_bonus'] = current_date.isoformat()
            
            # –ó–±—ñ–ª—å—à—É—î–º–æ –±–æ–Ω—É—Å –Ω–∞ 0.10, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 1.0
            next_bonus_amount = min(bonus_amount + 0.10, 1.0)
            user_data['daily_bonus_amount'] = next_bonus_amount
            
            save_data()
            safe_edit(f"üéâ **–í—ñ—Ç–∞—î–º–æ!** –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–≤—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å **{bonus_amount:.2f} ‚≠ê**!", chat_id, message_id, reply_markup=get_main_inline_markup(user_id), parse_mode="Markdown")
        else:
            safe_edit("‚ùå –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id), parse_mode="Markdown")

    # --- –†–ï–§–ï–†–ê–õ–ò ---
    elif data == "referral":
        user_data = users.get(user_id, {})
        ref_link = f"https://t.me/{(bot.get_me().username or 'N/A')}?start={user_id}"
        
        referer_count = sum(1 for u in users.values() if u.get('referer') == user_id)
        
        referral_text = (f"üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞**\n\n"
                         f"–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ **{REFERRAL_BONUS:.2f} ‚≠ê** –∑–∞ –∫–æ–∂–Ω–æ–≥–æ!\n"
                         f"–í–∏ —Ç–∞–∫–æ–∂ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ **{int(REFERRAL_EARNINGS_PERCENTAGE * 100)}%** –≤—ñ–¥ —ó—Ö –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤ —ñ–≥—Ä–∞—Ö!\n\n"
                         f"–í–∞—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n`{ref_link}`\n\n"
                         f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: **{referer_count}**\n\n"
                         f"–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∑ –¥—Ä—É–∑—è–º–∏!")
                         
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu"))
        safe_edit(referral_text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

    # --- VIP ---
    elif data == "buy_vip":
        user_data = users.get(user_id, {})
        if user_data.get('is_vip'):
            safe_edit("‚ùå –£ –≤–∞—Å –≤–∂–µ —î VIP-—Å—Ç–∞—Ç—É—Å.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id))
            return
        
        text = (f"üëë **–ü–æ–∫—É–ø–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å—É**\n\n"
                f"–í–∞—Ä—Ç—ñ—Å—Ç—å VIP: **{VIP_COST:.2f} ‚≠ê**\n\n"
                f"**–ü–µ—Ä–µ–≤–∞–≥–∏ VIP:**\n"
                f" - –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ **{int(VIP_DAILY_BONUS_MULTIPLIER)}x**\n"
                f" - –ó–Ω–∏–∂–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É **{int(AD_DISCOUNT * 100)}%**\n"
                f" - –ó–Ω–∏–∂–∫–∞ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ **{int((1 - PROMO_CREATE_COST_MULTIPLIER) * 100)}%**\n\n"
                f"–í–∏ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏ VIP-—Å—Ç–∞—Ç—É—Å?")
                
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç–∏", callback_data="confirm_buy_vip"),
                   types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="profile"))
                   
        safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")
    
    elif data == "confirm_buy_vip":
        user_data = users.get(user_id, {})
        if user_data.get('balance', 0) >= VIP_COST:
            user_data['balance'] -= VIP_COST
            user_data['is_vip'] = True
            save_data()
            safe_edit(f"üéâ **–í—ñ—Ç–∞—î–º–æ!** –í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å –∑–∞ **{VIP_COST:.2f} ‚≠ê**.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id), parse_mode="Markdown")
        else:
            safe_edit("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP-—Å—Ç–∞—Ç—É—Å—É.", chat_id, message_id, reply_markup=get_main_inline_markup(user_id))
    
    # --- –§–Ü–ù–ê–ù–°–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á ---
    elif data == "deposit":
        text = (f"üí∞ **–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É**\n\n"
                f"–ö—É—Ä—Å: **1 ‚≠ê = {DEPOSIT_RATE_UAH_PER_PER_STAR:.2f} UAH**\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ **UAH**. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: **{MIN_DEPOSIT_AMOUNT} –≥—Ä–Ω**.")
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_deposit_amount, sent_msg)
        
    elif data == "withdraw":
        text = (f"üí∏ **–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤**\n\n"
                f"–ö—É—Ä—Å: **1 ‚≠ê = {WITHDRAW_RATE_UAH_PER_STAR:.2f} UAH**\n"
                f"–ö–æ–º—ñ—Å—ñ—è –∑–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: **10%**\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ **‚≠ê**. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: **{MIN_WITHDRAW_AMOUNT} ‚≠ê**.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{users.get(user_id, {}).get('balance', 0):.2f} ‚≠ê**")
        sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_withdraw_amount, sent_msg)

    # --- –ö–ï–†–£–í–ê–ù–ù–Ø –ë–û–¢–û–ú ---
    elif data == "check_subscription":
        if is_subscribed(user_id):
            safe_edit("‚úÖ –í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.", chat_id, message_id, reply_markup=get_main_reply_markup())
            show_main_menu(user_id, chat_id, message_id)
        else:
            safe_edit("‚ùóÔ∏è **–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏.**\n\n"
                      "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏—â–µ, —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –∞ –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è'.", chat_id, message_id, reply_markup=get_subscription_markup(), parse_mode="Markdown")

    elif data == "cancel":
        bot.delete_message(chat_id, message_id)
        show_main_menu(user_id, chat_id)
        
    # --- –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ ---
    elif str(user_id) == str(ADMIN_ID):
        if data == "admin_panel":
            show_admin_panel(user_id, chat_id, message_id)
            
        elif data == "admin_deposit_requests_list":
            show_deposit_requests_list(chat_id, message_id)

        elif data == "admin_withdraw_requests_list":
            show_withdraw_requests_list(chat_id, message_id)

        elif data.startswith("admin_show_users_"):
            page = int(data.split('_')[3])
            show_users_list(chat_id, message_id, page)
        
        elif data == "admin_market_manage":
            show_admin_market_manage(chat_id, message_id)
        
        elif data == "admin_market_toggle":
            is_open = market_data.get('is_open', True)
            market_data['is_open'] = not is_open
            save_data()
            show_admin_market_manage(chat_id, message_id)
        
        elif data == "admin_set_market_price":
            text = (f"‚úèÔ∏è **–ó–º—ñ–Ω–∞ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ü—ñ–Ω–∏ SNOW**\n\n"
                    f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: **{market_data['market_price']:.2f} ‚≠ê**\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –∑–∞ 1 SNOW:")
            sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
            if sent_msg:
                bot.register_next_step_handler(sent_msg, process_admin_set_market_price, sent_msg)
            
        elif data == "admin_add_snow":
            text = (f"‚ûï **–î–æ–¥–∞—Ç–∏ SNOW –Ω–∞ —Ä–∏–Ω–æ–∫**\n\n"
                    f"–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: **{market_data['snow_available']:.2f} ‚ùÑÔ∏è**\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å SNOW, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏:")
            sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
            if sent_msg:
                bot.register_next_step_handler(sent_msg, process_admin_add_snow, sent_msg)

        elif data == "admin_manage_balance":
            text = "üí∞ **–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:"
            sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
            if sent_msg:
                bot.register_next_step_handler(sent_msg, process_admin_find_user, sent_msg)
        
        elif data.startswith("admin_view_deposit_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if not req or req.get('status') != 'pending':
                safe_edit("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)
                show_admin_panel(user_id, chat_id, message_id)
                return
            
            user_info = users.get(req['user_id'], {})
            text = (f"üí≥ **–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è #{request_id}**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{escape_markdown(user_info.get('username', 'N/A'))}\n"
                    f"–°—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: **{req['amount']:.2f} ‚≠ê**\n"
                    f"–°—É–º–∞ –≤ UAH: **{req['amount_uah']:.2f} –≥—Ä–Ω**\n"
                    f"–û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –Ω–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏: `{DEPOSIT_REQUISITES}`\n\n"
                    f"–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.")
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_approve_deposit_{request_id}"),
                       types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"admin_decline_deposit_{request_id}"))
            markup.add(types.InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data="admin_deposit_requests_list"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

        elif data.startswith("admin_view_withdraw_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if not req or req.get('status') != 'pending':
                safe_edit("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)
                show_admin_panel(user_id, chat_id, message_id)
                return
                
            user_info = users.get(req['user_id'], {})
            text = (f"üí∏ **–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è #{request_id}**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{escape_markdown(user_info.get('username', 'N/A'))}\n"
                    f"–°—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: **{req['amount']:.2f} ‚≠ê**\n"
                    f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: `{escape_markdown(req['requisites'])}`\n"
                    f"–°—É–º–∞ –¥–æ –≤–∏–ø–ª–∞—Ç–∏: **{req['amount_uah_after_fee']:.2f} –≥—Ä–Ω**\n\n"
                    f"–ü—ñ—Å–ª—è –≤–∏–ø–ª–∞—Ç–∏ –∫–æ—à—Ç—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.")
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"admin_approve_withdraw_{request_id}"),
                       types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"admin_decline_withdraw_{request_id}"))
            markup.add(types.InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data="admin_withdraw_requests_list"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

        elif data.startswith("admin_approve_deposit_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if req and req['status'] == 'pending':
                req['status'] = 'approved'
                user_id_to_update = req['user_id']
                user_data = users.get(user_id_to_update, {})
                user_data['balance'] += req['amount']
                save_data()
                bot.send_message(user_id_to_update, f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É **{req['amount']:.2f} ‚≠ê** –±—É–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–∏–π!", parse_mode="Markdown")
                safe_edit(f"‚úÖ –ó–∞–ø–∏—Ç #{request_id} –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.", chat_id, message_id, reply_markup=get_admin_panel_markup())
            else:
                safe_edit("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)
                
        elif data.startswith("admin_decline_deposit_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if req and req['status'] == 'pending':
                req['status'] = 'declined'
                save_data()
                bot.send_message(req['user_id'], f"‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É **{req['amount']:.2f} ‚≠ê** –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="Markdown")
                safe_edit(f"‚ùå –ó–∞–ø–∏—Ç #{request_id} –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", chat_id, message_id, reply_markup=get_admin_panel_markup())
            else:
                safe_edit("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)
                
        elif data.startswith("admin_approve_withdraw_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if req and req['status'] == 'pending':
                req['status'] = 'approved'
                save_data()
                bot.send_message(req['user_id'], f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É **{req['amount']:.2f} ‚≠ê** –±—É–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–∏–π. –ö–æ—à—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!", parse_mode="Markdown")
                safe_edit(f"‚úÖ –ó–∞–ø–∏—Ç #{request_id} –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.", chat_id, message_id, reply_markup=get_admin_panel_markup())
            else:
                safe_edit("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)

        elif data.startswith("admin_decline_withdraw_"):
            request_id = data.split('_')[3]
            req = pending_requests.get(request_id)
            if req and req['status'] == 'pending':
                user_id_to_update = req['user_id']
                user_data = users.get(user_id_to_update, {})
                user_data['balance'] += req['amount']
                req['status'] = 'declined'
                save_data()
                bot.send_message(user_id_to_update, f"‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É **{req['amount']:.2f} ‚≠ê** –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π. –ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode="Markdown")
                safe_edit(f"‚ùå –ó–∞–ø–∏—Ç #{request_id} –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", chat_id, message_id, reply_markup=get_admin_panel_markup())
            else:
                safe_edit("‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", chat_id, message_id)
        
        # –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
        elif data == "admin_create_promo_step1":
            text = "üéÅ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É (–ö—Ä–æ–∫ 1/3)**\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–º–æ–∫–æ–¥—É (–±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤):"
            sent_msg = safe_edit(text, chat_id, message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
            if sent_msg:
                bot.register_next_step_handler(sent_msg, process_create_promo_name, sent_msg)
        
        elif data == "admin_top_referrers":
            referer_counts = {}
            for user_data in users.values():
                referer_id = user_data.get('referer')
                if referer_id:
                    referer_counts[referer_id] = referer_counts.get(referer_id, 0) + 1
            
            top_referrers = sorted(referer_counts.items(), key=lambda item: item[1], reverse=True)[:15]

            if not top_referrers:
                text = "üèÜ **–¢–æ–ø 15 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤**\n\n–ù–∞—Ä–∞–∑—ñ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–≤ –¥—Ä—É–∑—ñ–≤."
            else:
                text = "üèÜ **–¢–æ–ø 15 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤:**\n\n"
                for i, (referer_id, count) in enumerate(top_referrers):
                    referer_data = users.get(referer_id, {})
                    username = escape_markdown(referer_data.get('username', 'N/A'))
                    text += f"**{i+1}.** @{username} - **{count}** —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            safe_edit(text, chat_id, message_id, reply_markup=markup, parse_mode="Markdown")

        elif data.startswith("admin_delete_review_"):
            try:
                review_index = int(data.split('_')[3]) - 1
                if 0 <= review_index < len(reviews):
                    del reviews[review_index]
                    save_data()
                    safe_edit(f"‚úÖ –í—ñ–¥–≥—É–∫ #{review_index+1} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", chat_id, message_id)
                    show_reviews(user_id, chat_id, message_id)
                else:
                    safe_edit("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥–≥—É–∫—É.", chat_id, message_id)
                    show_reviews(user_id, chat_id, message_id)
            except (ValueError, IndexError):
                safe_edit("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É.", chat_id, message_id)
                show_reviews(user_id, chat_id, message_id)

    else: # –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–ª–±–µ–∫—ñ–≤, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω.
        safe_edit("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", chat_id, message_id)
        show_main_menu(user_id, chat_id)
        return


# --- –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø TEXT –í–Ü–î –ê–î–ú–Ü–ù–ê ---
def get_admin_panel_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return markup

def process_create_promo_name(message, message_to_edit):
    user_id = str(message.from_user.id)
    promo_code = message.text.strip().upper()
    bot.delete_message(message.chat.id, message.message_id)
    
    if promo_code.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    if not promo_code.isalnum() or ' ' in promo_code:
        text = "‚ùå –ù–∞–∑–≤–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –±—É–∫–≤–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_create_promo_name, sent_msg)
        return
    
    if promo_code in promos:
        text = "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_create_promo_name, sent_msg)
        return

    admin_promo_creation_state[user_id] = {'code': promo_code}
    
    text = f"üéÅ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É (–ö—Ä–æ–∫ 2/3)**\n\n–ü—Ä–æ–º–æ–∫–æ–¥: **{promo_code}**\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –±–æ–Ω—É—Å—É –≤ **‚≠ê**:"
    sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
    if sent_msg:
        bot.register_next_step_handler(sent_msg, process_create_promo_amount, sent_msg)

def process_create_promo_amount(message, message_to_edit):
    user_id = str(message.from_user.id)
    amount_text = message.text.strip()
    bot.delete_message(message.chat.id, message.message_id)
    
    if amount_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        del admin_promo_creation_state[user_id]
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    bonus_amount = parse_amount(amount_text)
    if bonus_amount is None or bonus_amount <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_create_promo_amount, sent_msg)
        return

    admin_promo_creation_state[user_id]['bonus'] = bonus_amount
    
    text = (f"üéÅ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É (–ö—Ä–æ–∫ 3/3)**\n\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: **{admin_promo_creation_state[user_id]['code']}**\n"
            f"–ë–æ–Ω—É—Å: **{bonus_amount:.2f} ‚≠ê**\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):")
    sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
    if sent_msg:
        bot.register_next_step_handler(sent_msg, process_create_promo_activations, sent_msg)

def process_create_promo_activations(message, message_to_edit):
    user_id = str(message.from_user.id)
    activations_text = message.text.strip()
    bot.delete_message(message.chat.id, message.message_id)
    
    if activations_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        del admin_promo_creation_state[user_id]
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    try:
        max_activations = int(activations_text)
        if max_activations <= 0:
            raise ValueError
    except ValueError:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_create_promo_activations, sent_msg)
        return
        
    promo_data = admin_promo_creation_state.pop(user_id)
    promo_code = promo_data['code']
    bonus_amount = promo_data['bonus']
    
    promos[promo_code] = {
        'bonus': bonus_amount,
        'max_activations': max_activations,
        'used_activations': 0,
        'used_by_users': []
    }
    save_data()
    
    text = (f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{promo_code}` —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            f"–ë–æ–Ω—É—Å: **{bonus_amount:.2f} ‚≠ê**\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π: **{max_activations}**")
    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_admin_panel_markup(), parse_mode="Markdown")
    
# –û–±—Ä–æ–±–Ω–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def process_promo_code(message, message_to_edit):
    user_id = str(message.from_user.id)
    promo_code = message.text.strip().upper()
    bot.delete_message(message.chat.id, message.message_id)
    
    if promo_code.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    if promo_code not in promos:
        text = "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message_to_edit, process_promo_code, message_to_edit)
        return
        
    promo_data = promos[promo_code]
    
    if user_id in promo_data.get('used_by_users', []):
        text = "‚ùå –í–∏ –≤–∂–µ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥."
        safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message_to_edit, process_promo_code, message_to_edit)
        return

    if promo_data.get('used_activations', 0) >= promo_data.get('max_activations', 0):
        text = "‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ–π –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É."
        safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        bot.register_next_step_handler(message_to_edit, process_promo_code, message_to_edit)
        return
        
    # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞
    bonus = promo_data['bonus']
    users[user_id]['balance'] += bonus
    promo_data['used_activations'] += 1
    promo_data['used_by_users'].append(user_id)
    save_data()
    
    text = f"üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ `{promo_code}` —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ **{bonus:.2f} ‚≠ê**!"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))
    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=markup, parse_mode="Markdown")


def process_review(message, message_to_edit):
    user_id = str(message.from_user.id)
    review_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if review_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    reviews.append({
        'user_id': user_id,
        'username': users[user_id].get('username', 'N/A'),
        'text': review_text,
        'timestamp': datetime.now().isoformat()
    })
    save_data()
    safe_edit("‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_main_reply_markup())
    show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)

def process_buy_snow_amount(message, message_to_edit):
    user_id = str(message.from_user.id)
    amount_text = message.text.lower().strip()
    bot.delete_message(message.chat.id, message.message_id)
    
    if amount_text == '‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏':
        show_investments_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    amount = parse_amount(amount_text)
    if amount is None or amount <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_buy_snow_amount, sent_msg)
        return

    market_price = market_data.get('market_price', 0)
    cost = amount * market_price
    user_balance = users.get(user_id, {}).get('balance', 0)
    snow_available = market_data.get('snow_available', 0)

    if cost > user_balance:
        text = f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance:.2f} ‚≠ê."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_buy_snow_amount, sent_msg)
        return

    if amount > snow_available:
        text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SNOW –Ω–∞ —Ä–∏–Ω–∫—É. –î–æ—Å—Ç—É–ø–Ω–æ: {snow_available:.2f} ‚ùÑÔ∏è."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_buy_snow_amount, sent_msg)
        return

    users[user_id]['balance'] -= cost
    users[user_id]['snow_balance'] += amount
    market_data['snow_available'] -= amount
    save_data()
    text = f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏ **{amount:.2f} ‚ùÑÔ∏è** –∑–∞ **{cost:.2f} ‚≠ê**."
    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
    show_investments_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)

def process_dice_bet(message, message_to_edit, choice):
    user_id = str(message.from_user.id)
    bet_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if bet_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_main_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    bet = parse_amount(bet_text)
    if bet is None or bet < MIN_GAME_BET:
        text = f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—à–µ {MIN_GAME_BET} ‚≠ê."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_dice_bet, sent_msg, choice)
        return

    user_balance = users.get(user_id, {}).get('balance', 0)
    if user_balance < bet:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Å—É–º—É."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_dice_bet, sent_msg, choice)
        return

    start_dice_game(user_id, bet, message_to_edit, choice)

def start_dice_game(user_id, bet, message_to_edit, choice):
    users[user_id]['balance'] -= bet
    save_data()
    safe_edit("üé≤ –ö–∏–¥–∞—î–º–æ –∫—É–±–∏–∫...", message_to_edit.chat.id, message_to_edit.message_id)
    time.sleep(2)
    dice_roll = random.randint(1, 6)
    is_even = dice_roll % 2 == 0
    player_win = (choice == 'even' and is_even) or (choice == 'odd' and not is_even)
    result_text = (f"üé≤ **–ì—Ä–∞ '–ö—ñ—Å—Ç–∫–∏'**\n\n"
                   f"**–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:** {bet:.2f} ‚≠ê\n"
                   f"–í–∞—à –≤–∏–±—ñ—Ä: **{'–ü–∞—Ä–Ω–µ' if choice == 'even' else '–ù–µ–ø–∞—Ä–Ω–µ'}**\n"
                   f"–í–∏–ø–∞–ª–æ: **{dice_roll}** ({'–ü–∞—Ä–Ω–µ' if is_even else '–ù–µ–ø–∞—Ä–Ω–µ'})\n\n")
    win_amount = 0
    if player_win:
        win_amount = bet * 2
        users[user_id]['balance'] += win_amount
        result_text += f"üéâ **–í–∏ –≤–∏–≥—Ä–∞–ª–∏!** –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ **{win_amount:.2f} ‚≠ê**.\n"
    else:
        result_text += f"üòû **–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏.**\n"
    save_data()
    result_text += f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_id]['balance']:.2f} ‚≠ê**"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üéÆ –ó–Ω–æ–≤—É –≥—Ä–∞—Ç–∏", callback_data="game_dice"),
               types.InlineKeyboardButton("üîô –Ü–≥—Ä–∏", callback_data="games"))
    safe_edit(result_text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=markup, parse_mode="Markdown")
    if player_win:
        award_referer_earnings(user_id, win_amount - bet)

def process_miner_bet(message, message_to_edit, mines_count):
    user_id = str(message.from_user.id)
    bet_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if bet_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_main_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    bet = parse_amount(bet_text)
    if bet is None or bet < MIN_GAME_BET:
        text = f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—à–µ {MIN_GAME_BET} ‚≠ê."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_miner_bet, sent_msg, mines_count)
        return
        
    user_balance = users.get(user_id, {}).get('balance', 0)
    if user_balance < bet:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Å—É–º—É."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_miner_bet, sent_msg, mines_count)
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É —ñ –ø–æ—á–∏–Ω–∞—î–º–æ
    game = create_miner_game(user_id, bet, mines_count)
    users[user_id]['balance'] -= bet
    save_data()

    game_text = (f"‚õèÔ∏è **–ì—Ä–∞ '–°–∞–ø–µ—Ä'**\n\n"
                 f"–°—Ç–∞–≤–∫–∞: **{bet:.2f} ‚≠ê**\n"
                 f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω: **{mines_count}**\n\n"
                 f"–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É:")
    
    safe_edit(game_text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_miner_markup(user_id), parse_mode="Markdown")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≥—Ä—É "–õ—ñ—Ç–∞–∫–∏"
def process_plane_bet(message, message_to_edit):
    user_id = str(message.from_user.id)
    bet_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if bet_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_main_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return
        
    bet = parse_amount(bet_text)
    if bet is None or bet < MIN_GAME_BET:
        text = f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—à–µ {MIN_GAME_BET} ‚≠ê."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_plane_bet, sent_msg)
        return

    user_balance = users.get(user_id, {}).get('balance', 0)
    if user_balance < bet:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Å—É–º—É."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_plane_bet, sent_msg)
        return

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
    users[user_id]['balance'] -= bet
    save_data()
    start_plane_game(user_id, bet, message_to_edit)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
def process_deposit_amount(message, message_to_edit):
    user_id = str(message.from_user.id)
    amount_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if amount_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    amount_uah = parse_amount(amount_text)
    if amount_uah is None or amount_uah < MIN_DEPOSIT_AMOUNT:
        text = f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: **{MIN_DEPOSIT_AMOUNT} –≥—Ä–Ω**."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_deposit_amount, sent_msg)
        return
        
    amount_stars = amount_uah / DEPOSIT_RATE_UAH_PER_PER_STAR

    request_id = str(uuid.uuid4())
    pending_requests[request_id] = {
        'request_id': request_id,
        'user_id': user_id,
        'username': users[user_id]['username'],
        'type': 'deposit',
        'amount': amount_stars,
        'amount_uah': amount_uah,
        'status': 'pending',
        'timestamp': datetime.now().isoformat()
    }
    save_data()
    
    text = (f"üí≥ **–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
            f"–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: **{amount_uah:.2f} –≥—Ä–Ω**\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ: **{amount_stars:.2f} ‚≠ê**\n\n"
            f"–ü–µ—Ä–µ–∫–∞–∂—ñ—Ç—å –∫–æ—à—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ —Ç–∞ –æ—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
            f"`{DEPOSIT_REQUISITES}`\n\n"
            f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: @{(bot.get_chat(ADMIN_ID).username or 'N/A')}\n\n"
            f"–ó–∞–ø–∏—Ç –±—É–¥–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")
            
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))
    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=markup, parse_mode="Markdown")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
def process_withdraw_amount(message, message_to_edit):
    user_id = str(message.from_user.id)
    amount_text = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if amount_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", message_to_edit.chat.id, message_to_edit.message_id)
        show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    amount_stars = parse_amount(amount_text)
    if amount_stars is None or amount_stars < MIN_WITHDRAW_AMOUNT:
        text = f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è: **{MIN_WITHDRAW_AMOUNT} ‚≠ê**."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_withdraw_amount, sent_msg)
        return
        
    user_balance = users.get(user_id, {}).get('balance', 0)
    if amount_stars > user_balance:
        text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ. –í–∞—à –±–∞–ª–∞–Ω—Å: **{user_balance:.2f} ‚≠ê**."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_withdraw_amount, sent_msg)
        return
        
    users[user_id]['balance'] -= amount_stars
    save_data()

    text = "üí∏ **–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤**\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à—Ç–∏:"
    sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
    if sent_msg:
        bot.register_next_step_handler(sent_msg, process_withdraw_requisites, sent_msg, amount_stars)


def process_withdraw_requisites(message, message_to_edit, amount_stars):
    user_id = str(message.from_user.id)
    requisites = message.text
    bot.delete_message(message.chat.id, message.message_id)
    
    if requisites.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        users[user_id]['balance'] += amount_stars # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—à—Ç–∏
        save_data()
        safe_edit(f"‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ö–æ—à—Ç–∏ **{amount_stars:.2f} ‚≠ê** –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.", message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
        show_profile_menu(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    request_id = str(uuid.uuid4())
    amount_uah = amount_stars * WITHDRAW_RATE_UAH_PER_STAR
    
    pending_requests[request_id] = {
        'request_id': request_id,
        'user_id': user_id,
        'username': users[user_id]['username'],
        'type': 'withdraw',
        'amount': amount_stars,
        'requisites': requisites,
        'amount_uah_after_fee': amount_uah,
        'status': 'pending',
        'timestamp': datetime.now().isoformat()
    }
    save_data()
    
    text = (f"üí∏ **–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
            f"–°—É–º–∞ –≤ **‚≠ê**: **{amount_stars:.2f} ‚≠ê**\n"
            f"–°—É–º–∞ –¥–æ –≤–∏–ø–ª–∞—Ç–∏: **{amount_uah:.2f} –≥—Ä–Ω**\n"
            f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏: `{escape_markdown(requisites)}`\n\n"
            f"–û—á—ñ–∫—É–π—Ç–µ, –ø–æ–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–æ–±–∏—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç.")
            
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))
    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=markup, parse_mode="Markdown")


# –ê–î–ú–Ü–ù-–§–£–ù–ö–¶–Ü–á (–û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø TEXT)
def process_admin_set_market_price(message, message_to_edit):
    user_id = str(message.from_user.id)
    price_text = message.text.lower().strip()
    bot.delete_message(message.chat.id, message.message_id)

    if price_text == '‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏':
        show_admin_market_manage(message_to_edit.chat.id, message_to_edit.message_id)
        return
    
    new_price = parse_amount(price_text)
    if new_price is None or new_price <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_set_market_price, sent_msg)
        return
        
    market_data['market_price'] = new_price
    save_data()
    safe_edit(f"‚úÖ –†–∏–Ω–∫–æ–≤–∞ —Ü—ñ–Ω–∞ SNOW —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ **{new_price:.2f} ‚≠ê**.", message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
    show_admin_market_manage(message_to_edit.chat.id, message_to_edit.message_id)


def process_admin_add_snow(message, message_to_edit):
    user_id = str(message.from_user.id)
    amount_text = message.text.lower().strip()
    bot.delete_message(message.chat.id, message.message_id)
    
    if amount_text == '‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏':
        show_admin_market_manage(message_to_edit.chat.id, message_to_edit.message_id)
        return

    amount = parse_amount(amount_text)
    if amount is None or amount <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_add_snow, sent_msg)
        return
        
    market_data['snow_available'] += amount
    save_data()
    safe_edit(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ **{amount:.2f} ‚ùÑÔ∏è** –Ω–∞ —Ä–∏–Ω–æ–∫.", message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
    show_admin_market_manage(message_to_edit.chat.id, message_to_edit.message_id)


def process_admin_find_user(message, message_to_edit):
    user_id = str(message.from_user.id)
    query = message.text.lower().strip()
    bot.delete_message(message.chat.id, message.message_id)
    
    if query == '‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏':
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    found_user_id = find_user_by_id_or_username(query)
    
    if not found_user_id:
        text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π @username –∞–±–æ ID."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_find_user, sent_msg)
        return

    user_data = users[found_user_id]
    
    text = (f"üë§ **–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{escape_markdown(user_data.get('username', 'N/A'))}\n"
            f"ID: `{found_user_id}`\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{user_data['balance']:.2f} ‚≠ê**\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ ‚≠ê", callback_data=f"admin_add_balance_{found_user_id}"))
    markup.add(types.InlineKeyboardButton("‚ûñ –ó–Ω—è—Ç–∏ ‚≠ê", callback_data=f"admin_remove_balance_{found_user_id}"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=markup, parse_mode="Markdown")


# ... (–Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π) ...
def process_admin_add_balance(message, message_to_edit, user_to_update_id):
    user_id = str(message.from_user.id)
    amount_text = message.text.strip()
    bot.delete_message(message.chat.id, message.message_id)

    if amount_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return

    amount = parse_amount(amount_text)
    if amount is None or amount <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_add_balance, message_to_edit, user_to_update_id)
        return
    
    users[user_to_update_id]['balance'] += amount
    save_data()
    bot.send_message(user_to_update_id, f"‚ûï –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–¥–∞–≤ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å **{amount:.2f} ‚≠ê**.")
    safe_edit(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_to_update_id]['balance']:.2f} ‚≠ê**.", message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
    show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)


def process_admin_remove_balance(message, message_to_edit, user_to_update_id):
    user_id = str(message.from_user.id)
    amount_text = message.text.strip()
    bot.delete_message(message.chat.id, message.message_id)

    if amount_text.lower() == "‚ùå —Å–∫–∞—Å—É–≤–∞—Ç–∏":
        show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)
        return
        
    amount = parse_amount(amount_text)
    if amount is None or amount <= 0:
        text = "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_remove_balance, message_to_edit, user_to_update_id)
        return

    if users[user_to_update_id]['balance'] < amount:
        text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_to_update_id]['balance']:.2f} ‚≠ê**."
        sent_msg = safe_edit(text, message_to_edit.chat.id, message_to_edit.message_id, reply_markup=get_cancel_inline_markup(), parse_mode="Markdown")
        if sent_msg:
            bot.register_next_step_handler(sent_msg, process_admin_remove_balance, message_to_edit, user_to_update_id)
        return
    
    users[user_to_update_id]['balance'] -= amount
    save_data()
    bot.send_message(user_to_update_id, f"‚ûñ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–Ω—è–≤ –∑ –≤–∞—à–æ–≥–æ –±–∞–ª–∞–Ω—Å—É **{amount:.2f} ‚≠ê**.")
    safe_edit(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: **{users[user_to_update_id]['balance']:.2f} ‚≠ê**.", message_to_edit.chat.id, message_to_edit.message_id, parse_mode="Markdown")
    show_admin_panel(user_id, message_to_edit.chat.id, message_to_edit.message_id)


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    load_data()
    print("Bot is running...")
    bot.polling(non_stop=True)
